const canvas = document.getElementById("gameCanvas");
const button = document.getElementById("button");
const restartButton = document.getElementById("restartButton");
const infoBar = document.getElementById("infoBar");
const ctx = canvas.getContext("2d");
let brVragove = 3;
const BR_TOPKI = 50;
let broiki = BR_TOPKI;
// –ú–∞—Å–∏–≤ –∑–∞ —Ç–æ–ø–∫–∏—Ç–µ
let balls = [];
let playerBall = null;
let speed = 3;
let isPaused = false, spacePressed = false;
let chocar = false; // –ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞, —Å–ª–µ–¥ —Å–±–ª—ä—Å—ä–∫.
let btnStartPressed = false;
const katasSound = new Audio("sounds/explosion.wav");
const pobedaSound = new Audio("sounds/snakeBonus.wav");
let posoka = "i";
// –ú–∞—Å–∏–≤ –∑–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏—Ç–µ
let enemies = [];
let points = 0;
canvResized = false;
let broyach = 0;
let zakacheni = 0;
let fin = false;
let brFin = 0;
let enemiSkor1 = 0.5, enemiSkor2 = 1.5;
// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç –≤ sessionStorage
//–¢—è —Å–µ –∏–∑–≤–∏–∫–≤–∞ –ø–æ –∫—ä—Å–Ω–æ –æ—Ç button_click
const saveDifficulty = () => {
    const selected = document.querySelector('input[name="trudnost"]:checked'); // –ò–∑–±–∏—Ä–∞ –∏–∑–±—Ä–∞–Ω–∏—è —Ä–∞–¥–∏–æ –±—É—Ç–æ–Ω
    if (selected) {
        sessionStorage.setItem('difficulty', selected.id); // –ó–∞–ø–∞–∑–≤–∞ ID –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç
    }
};
// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
const loadDifficulty = () => {
    const savedDifficulty = sessionStorage.getItem('difficulty'); // –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∏–º–∞ –∑–∞–ø–∞–∑–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
    if (savedDifficulty) {
        const savedRadio = document.getElementById(savedDifficulty);
        if (savedRadio) {
            savedRadio.checked = true; // –ú–∞—Ä–∫–∏—Ä–∞ –∑–∞–ø–∞–∑–µ–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç –∫–∞—Ç–æ –∏–∑–±—Ä–∞–Ω–∞
        }
    }
};
// –ó–∞—Ä–µ–∂–¥–∞ –∑–∞–ø–∞–∑–µ–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç, –∫–æ–≥–∞—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ —Å–µ –∑–∞—Ä–µ–¥–∏
window.addEventListener('DOMContentLoaded', loadDifficulty);
restartButton.addEventListener("click", function(){
    location.reload(); // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
});
button.addEventListener ("click", function(){
    this.style.display = "none";
    cont.style.display = "none";
    canvas.style.cursor = 'none';
    btnStartPressed = true;
    saveDifficulty(); // –ó–∞–ø–∞–∑–≤–∞ –∏–∑–±–æ—Ä–∞ –Ω–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç
    if(easy.checked){
        speed = 3;
        enemiSkor2 = 1.5;
        enemiSkor1 = 0.5;
        /* speedTimer = 30; */
    }
    else if(medium.checked){
        speed = 4;
        brVragove = 4;
        enemiSkor2 = 2.0;
        enemiSkor1 = 1.0;
        /* speedTimer = 20; */
    }
    else{
        speed = 5;
        brVragove = 5;
        enemiSkor2 = 2.5;
        enemiSkor1 = 1.5;
        /* speedTimer = 10; */
    }
    createEneBalls();
    drawGame();
    });

function resizeCanvas() { 
    if(fin) return;
    if(canvResized === true && btnStartPressed === false && broyach > 0 ||(chocar)){
        location.reload(); // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
    }
        //–ù–∞—á–∞–ª–æ
        updateInfoBar();
        canvas.width = window.innerWidth;  // –ó–∞–¥–∞–≤–∞ —à–∏—Ä–∏–Ω–∞—Ç–∞ –Ω–∞ –≤–∏–¥–∏–º–∏—è –ø—Ä–æ–∑–æ—Ä–µ—Ü
        canvas.height = window.innerHeight - infoBar.offsetHeight; // –ó–∞–¥–∞–≤–∞ –≤–∏—Å–æ—á–∏–Ω–∞—Ç–∞ –Ω–∞ –≤–∏–¥–∏–º–∏—è –ø—Ä–æ–∑–æ—Ä–µ—Ü
        canvas.style.cursor = 'none';
        isPaused = false; //Igrata da prodalzhi
        canvResized = true; 
        broyach ++;
        if(infoBar.style.backgroundColor = "rgba(180, 180, 180, 1)"){
            nastroiResumedGame();
        }  
}
window.addEventListener("blur", function () {
    if (!isPaused && btnStartPressed) {
        isPaused = true;
        nastroiPausedGame();
        //printNaPauza();
    }
});
// –ò–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ resizeCanvas –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∏ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞
window.addEventListener("resize", resizeCanvas);
    resizeCanvas(); // –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –æ—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ωe

function createBalls(){
    
    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ 50 —Å–ª—É—á–∞–π–Ω–∏ —Ç–æ–ø–∫–∏
for (let i = 0; i < BR_TOPKI; i++) {
    balls.push({
        x: Math.random() * (canvas.width - 30) + 15,
        y: Math.random() * (canvas.height - 30) + 15,
        vx: (Math.random() - 0.5) * 4,
        vy: (Math.random() - 0.5) * 4,
        radius: 15,
        isAttached: false, // –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Ç–æ–ø–∫–∞—Ç–∞ –µ —á–∞—Å—Ç –æ—Ç –≤–ª–∞–∫—á–µ—Ç–æ
    });
}
// –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ç–æ–ø–∫–∞—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞
playerBall = {
    x: canvas.width / 2,
    //y: canvas.height - 30,
    y: canvas.height + 40,
    vx: 0,
    vy: -speed,
    radius: 20,
    attachedBalls: [], // –ú–∞—Å–∏–≤ –∑–∞ –≤–ª–∞–∫—á–µ—Ç–æ
};
}
function createEneBalls(){
    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ 3 –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤–∏ —Ç–æ–ø–∫–∏
for (let i = 0; i < brVragove; i++) {
    enemies.push({
        radius: 10,
        x: Math.random() * canvas.width,
        y: Math.random() * -canvas.height-10, // –ü–æ—è–≤—è–≤–∞—Ç —Å–µ –∏–∑–≤—ä–Ω –≤–∏–¥–∏–º–∏—è –µ–∫—Ä–∞–Ω
        vy: Math.random() * enemiSkor2 + enemiSkor1, // –°–∫–æ—Ä–æ—Å—Ç –Ω–∞ –ø–∞–¥–∞–Ω–µ
    });
}
}
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø–∫–∞—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞
document.addEventListener("keydown", (event) => {
    let zvukPath = "sounds/snakeZavoj.wav";
        switch (event.key) {
            case "i": // –ù–∞–≥–æ—Ä–µ
            if(posoka != "i"){
                playerBall.vx = 0;
                playerBall.vy = -speed;
                playMoveSound(zvukPath);
                posoka = "i";
                }
            break;
            case "m": // –ù–∞–¥–æ–ª—É
            if(posoka != "m"){
                playerBall.vx = 0;
                playerBall.vy = speed;
                playMoveSound(zvukPath);
                posoka = "m";
            }
            break;   
            case "j": // –ù–∞–ª—è–≤–æ
            if(posoka != "j"){
                playerBall.vx = -speed;
                playerBall.vy = 0;
                playMoveSound(zvukPath);
                posoka = "j";
            }
            break; 
            case "k": // –ù–∞–¥—è—Å–Ω–æ
            if(posoka != "k"){
                playerBall.vx = speed;
                playerBall.vy = 0;
                playMoveSound(zvukPath);
                posoka = "k";
            }
            break;
        }
    if(event.code === 'Space' && !spacePressed && btnStartPressed){
        if(chocar === true || fin === true){
            location.reload(); // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
        }
        isPaused = !isPaused; // –ü—Ä–µ–≤–∫–ª—é—á–≤–∞ –º–µ–∂–¥—É –ø–∞—É–∑–∞ –∏ –∏–≥—Ä–∞
        spacePressed = true; // –ó–∞–¥–∞–≤–∞, —á–µ Space –µ –Ω–∞—Ç–∏—Å–Ω–∞—Ç
        if(isPaused){
            nastroiPausedGame();
        }else{
            nastroiResumedGame();
        }
    }
});
document.addEventListener("keyup", (event) => {
    if (event.code === "Space") {
        spacePressed = false; // –ó–∞–¥–∞–≤–∞, —á–µ Space –≤–µ—á–µ –Ω–µ –µ –Ω–∞—Ç–∏—Å–Ω–∞—Ç
    }
});

function nastroiPausedGame(){
    canvas.style.cursor = 'auto';
    infoBar.style.backgroundImage = "linear-gradient(to bottom, rgba(150, 150, 150, 1), rgba(80, 80, 80, 1))";
    infoBar.style.backgroundColor = "rgba(180, 180, 180, 1)";
    infoBar.style.borderTop = "2px solid rgba(120, 120, 120, 1)"; // –°–∏–≤–∞ –≥–æ—Ä–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞
    infoBar.style.borderBottom = "2px solid rgba(200, 200, 200, 1)"; // –°–≤–µ—Ç–ª–æ —Å–∏–≤–∞ –¥–æ–ª–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞
    infoBar.textContent = "–ò–≥—Ä–∞—Ç–∞ –µ –Ω–∞ –ø–∞—É–∑–∞! –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ –∫–ª–∞–≤–∏—à '–ü–∞—É–∑–∞'";
}
function nastroiResumedGame(){
    canvas.style.cursor = 'none';
    infoBar.style.backgroundImage = "";
    infoBar.style.backgroundColor = "";
    infoBar.style.borderTop = "2px solid #8b0000"; // –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞
    infoBar.style.borderBottom = "2px solid #cd5c5c"; // –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞
    updateInfoBar();
}
function checkGameOver() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–∞ –ø–æ–Ω–µ –µ–¥–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞ —Ç–æ–ø–∫–∞   
    // –ê–∫–æ –Ω—è–º–∞ —Å–≤–æ–±–æ–¥–Ω–∏ —Ç–æ–ø–∫–∏, –∏–≥—Ä–∞—Ç–∞ —Å–≤—ä—Ä—à–≤–∞ —Å –ø–æ–±–µ–¥–∞
    if (brSvobodniT() === 0) {
        brFin++;
        /* if(brFin > 20){
            narisuvaiPobedaZaguba("pobeda");       
        }   */ 

        // –°–ª–µ–¥ 1-2 —Å–µ–∫—É–Ω–¥–∏, –ø–æ–∫–∞–∑–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∏ —Å–ø–∏—Ä–∞–º–µ –∏–≥—Ä–∞—Ç–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª–Ω–æ
    }
}
function narisuvaiPobedaZaguba(zagPob){
    let moiText ="";
    let bonusText=" ";
    let infoText = "";
    if(zagPob === "pobeda"){
        isPaused = true;
        fin = true;
        canvas.style.cursor = 'auto';
        moiText = `–ü–æ–±–µ–¥–∏—Ö—Ç–µ! –ò–º–∞—Ç–µ ${zakacheni} —Ç–æ–ø–∫–∏`;
        infoText = '–û—á–∞–∫–≤–∞–π—Ç–µ –ø—Ä–æ–¥—ä–ª–∂–µ–Ω–∏–µ... üòâ';
        pobedaSound.currentTime = 0;
        pobedaSound.play();
    }
    else { //zaguba
        chocar = true;
        isPaused = true;
        canvas.style.cursor = 'auto';
        moiText = `–°–±–ª—ä—Å—ä–∫!!! –ó–∞–≥—É–±–∏—Ö—Ç–µüòû. –ò–º–∞—Ç–µ ${zakacheni} —Ç–æ–ø–∫–∏`;
        infoText = '–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ "–ü–∞—É–∑–∞" –∏–ª–∏ "–†–µ—Å—Ç–∞—Ä—Ç" –∑–∞ –Ω–æ–≤–∞ –∏–≥—Ä–∞.';
        katasSound.currentTime = 0;
        katasSound.play();
    }
    
    // –ó–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∏–ª–æ–≤–µ –∑–∞ —Ç–µ–∫—Å—Ç–∞
    ctx.font = 'bold 2rem Arial'; // –®—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä
    ctx.textAlign = 'center'; // –¶–µ–Ω—Ç—Ä–∏—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Ö–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–Ω–æ
    ctx.textBaseline = 'middle'; // –¶–µ–Ω—Ç—Ä–∏—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª–Ω–æ
    //zakacheni = brZakacheniT();

    // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ —Å—è–Ω–∫–∞
    ctx.fillStyle = 'gray'; // –¶–≤—è—Ç –Ω–∞ —Å—è–Ω–∫–∞—Ç–∞
    ctx.fillText(moiText, canvas.width / 2 + 1, canvas.height / 2.4 +2 );
    if(zakacheni === BR_TOPKI){
        bonusText = `–ë—Ä–∞–≤–æ, 100% —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç ! ! !`;
        ctx.font = 'bold 1.3rem Arial';
        ctx.fillText(bonusText, canvas.width / 2 + 1, canvas.height / 2.4 + 52);
    }
    
    // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—è —Ç–µ–∫—Å—Ç
    ctx.font = 'bold 2rem Arial';
    ctx.fillStyle = '#1e1e95'; // –û—Å–Ω–æ–≤–Ω–∏—è—Ç —Ü–≤—è—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–∞
    ctx.fillText(moiText, canvas.width / 2, canvas.height / 2.4);
        ctx.font = 'bold 1.3rem Arial';
        ctx.fillText(bonusText, canvas.width / 2, canvas.height / 2.4 + 50);
    
    ctx.font = '1.2rem Arial';
    ctx.fillStyle ='#555';
    ctx.fillText(infoText, Math.round(canvas.width / 2), Math.round(canvas.height / 1.5));

}
function brSvobodniT(){
    const freeBalls = balls.filter(ball => !ball.isAttached);
    return freeBalls.length;
}
/* function brZakacheniT(){
    const zakachBalls = balls.filter(ball => ball.isAttached);
    return zakachBalls.length;
} */
function playMoveSound(path) {
    if(isPaused === false){
        const moveSoundInstance = new Audio(path);
        moveSoundInstance.play();
    }
}
function updateInfoBar() {
    if(!btnStartPressed){
        broiki= BR_TOPKI;
    }
    else{broiki= brSvobodniT();}
    
    infoBar.textContent = `–•–≤–∞–Ω–∞—Ç–∏: ${points} —Ç–æ–ø–∫–∏ | –î—ä–ª–∂–∏–Ω–∞: ${zakacheni} —Ç–æ–ø–∫–∏ | –û—Å—Ç–∞–≤–∞—Ç: ${broiki} —Ç–æ–ø–∫–∏`;
}
// —É–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ —Ç–æ—á–∫–∏—Ç–µ:
function increasePoints(amount) {
    points += amount;
    updateInfoBar();
}
function drawGame() {
    if (isPaused === false && chocar === false) { 
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ —Ç–æ–ø–∫–∞—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞
        const gradient0 = ctx.createRadialGradient(playerBall.x - 6, playerBall.y - 6, 3, playerBall.x, playerBall.y, playerBall.radius);
        gradient0.addColorStop(0, "white");
        gradient0.addColorStop(0.5, "#57ff57");
        gradient0.addColorStop(1, "darkgreen");
        ctx.beginPath();
        ctx.arc(Math.round(playerBall.x), Math.round(playerBall.y), playerBall.radius, 0, Math.PI * 2);
        ctx.fillStyle = gradient0;
        ctx.fill();
        ctx.closePath();

        if(!isPaused){
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∫—Ä–∞—è –Ω–∞ –∏–≥—Ä–∞—Ç–∞
        checkGameOver(); // –ò–∑–≤–∏–∫–≤–∞–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –∑–∞ —Å–≤–æ–±–æ–¥–Ω–∏ —Ç–æ–ø–∫–∏
        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞
        playerBall.x += playerBall.vx;
        playerBall.y += playerBall.vy;

        // –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–Ω–µ –≤ –≥—Ä–∞–Ω–∏—Ü–∏—Ç–µ –Ω–∞ canvas
        if (playerBall.x < playerBall.radius) {playerBall.x = playerBall.radius;}
        if (playerBall.x > canvas.width - playerBall.radius) {playerBall.x = canvas.width - playerBall.radius;}
        if (playerBall.y < playerBall.radius) {playerBall.y = playerBall.radius;}
        if (playerBall.y > canvas.height - playerBall.radius && btnStartPressed) {playerBall.y = canvas.height - playerBall.radius; }
        }
        // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤–∏—Ç–µ —Ç–æ–ø–∫–∏
        
        enemies.forEach((enemy, index) => {
        const gradiEnem = ctx.createRadialGradient(enemy.x - 3, enemy.y - 3, 2, enemy.x, enemy.y, enemy.radius);
        gradiEnem.addColorStop(0, "white");
        gradiEnem.addColorStop(0.5, "#999");
        gradiEnem.addColorStop(1, "black");
            ctx.beginPath();
            ctx.arc(Math.round(enemy.x), Math.round(enemy.y), enemy.radius, 0, Math.PI * 2);
            ctx.fillStyle = gradiEnem;
            ctx.fill();
            ctx.closePath();

            // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            enemy.y += enemy.vy;

            // –ê–∫–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—ä—Ç –¥–æ—Å—Ç–∏–≥–Ω–µ –¥—ä–Ω–æ—Ç–æ, —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –≥–æ –æ—Ç–≥–æ—Ä–µ
            if (enemy.y > canvas.height) {
                enemy.y = -enemy.radius;
                enemy.x = Math.random() * canvas.width;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å–±–ª—ä—Å—ä–∫ —Å –∏–≥—Ä–∞—á–∞
            const dx = playerBall.x - enemy.x;
            const dy = playerBall.y - enemy.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å–±–ª—ä—Å—ä–∫ —Å –æ–ø–∞—à–∫–∞—Ç–∞
            let zvukCortar = "sounds/minus.wav";
            playerBall.attachedBalls.forEach((attachedBall, attachedIndex) => {
                const dxTail = attachedBall.x - enemy.x;
                const dyTail = attachedBall.y - enemy.y;
                const distanceTail = Math.sqrt(dxTail * dxTail + dyTail * dyTail);
                if (distanceTail < attachedBall.radius + enemy.radius) {
                    // –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —á–∞—Å—Ç –æ—Ç –æ–ø–∞—à–∫–∞—Ç–∞
                    playerBall.attachedBalls.splice(attachedIndex);
                    zakacheni = playerBall.attachedBalls.length;
                    playMoveSound(zvukCortar);
                    updateInfoBar();
                }
            });
            let buffer = 4;
            if (distance < playerBall.radius + enemy.radius - buffer) {
                //alert("Game Over!");
                chocar = true;
                //narisuvaiPobedaZaguba("zaguba"); //chocar —Å—Ç–∞–≤–∞ true               
            }
        });

        // –†–∏—Å—É–≤–∞–Ω–µ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–ø–∫–∏—Ç–µ
        balls.forEach((ball) => {
            if (!ball.isAttached) {
                const gradient = ctx.createRadialGradient(ball.x - 6, ball.y - 6, 5, ball.x, ball.y, ball.radius);
                gradient.addColorStop(0, "white");
                gradient.addColorStop(0.3, "orange");
                gradient.addColorStop(1, "darkred");
                ctx.beginPath();
                ctx.arc(Math.round(ball.x), Math.round(ball.y), ball.radius, 0, Math.PI * 2);
                ctx.fillStyle = gradient;
                ctx.fill();
                ctx.closePath();
                if(btnStartPressed === false) return;
                // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞
                ball.x += ball.vx;
                ball.y += ball.vy;
                // –û—Ç—Å–∫–∞—á–∞–Ω–µ –æ—Ç —Å—Ç–µ–Ω–∏—Ç–µ
                if (ball.x < ball.radius || ball.x > canvas.width - ball.radius) ball.vx *= -1;
                if (ball.y < ball.radius || ball.y > canvas.height - ball.radius) ball.vy *= -1;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –±–ª–∏–∑–æ—Å—Ç —Å –∏–≥—Ä–∞—á–∞
                const dx = playerBall.x - ball.x;
                const dy = playerBall.y - ball.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance - 15 < playerBall.radius + ball.radius) {
                    let zvukHam = "sounds/ham.wav";
                    ball.isAttached = true;
                    playerBall.attachedBalls.push(ball);
                    zakacheni = playerBall.attachedBalls.length;
                    increasePoints(1); // –£–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ —Ç–æ—á–∫–∏—Ç–µ
                    playMoveSound(zvukHam);
                }
            }
        });

        // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ –≤–ª–∞–∫—á–µ—Ç–æ
        let prevX = playerBall.x;
        let prevY = playerBall.y;
        playerBall.attachedBalls.forEach((attachedBall, index) => {
            const followSpeed = 0.2;
            attachedBall.x += (prevX - attachedBall.x) * followSpeed;
            attachedBall.y += (prevY - attachedBall.y) * followSpeed;

            const gradientA = ctx.createRadialGradient(attachedBall.x - 4, attachedBall.y - 4, 3, attachedBall.x, attachedBall.y, attachedBall.radius);
            gradientA.addColorStop(0, "white");
            gradientA.addColorStop(0.3, "#ffff6f");
            gradientA.addColorStop(1, "#9f9f01");
            const gradientB = ctx.createRadialGradient(attachedBall.x - 4, attachedBall.y - 4, 3, attachedBall.x, attachedBall.y, attachedBall.radius);
            gradientB.addColorStop(0, "white");
            gradientB.addColorStop(0.3, "#ff8989");
            gradientB.addColorStop(1, "darkred");
            ctx.beginPath();
            ctx.arc(Math.round(attachedBall.x), Math.round(attachedBall.y), attachedBall.radius, 0, Math.PI * 2);
            ctx.fillStyle = index % 2 === 0 ? gradientA : gradientB;
            ctx.fill();
            ctx.closePath();

            prevX = attachedBall.x;
            prevY = attachedBall.y;
            if(chocar === true){
                updateInfoBar();
                narisuvaiPobedaZaguba("zaguba"); //chocar —Å—Ç–∞–≤–∞ true
                return;
            };
            if(brFin > 20){
                narisuvaiPobedaZaguba("pobeda");
            }
        });
    }
    if(btnStartPressed){
        requestAnimationFrame(drawGame);
    }
}
//resizeCanvas();
createBalls();
drawGame();
